--[[-----------------------------------------------------------------------------
Encode
json.encode(val, add_escape, round_num)
  val         - mandatory array(table) for encoding
  add_escape  - option, if true then add escapeing chars to out
  round_num   - option, number round precision

Decode
json.decode(str, del_escape)
  str         - JSON string
  del_escape  - if true - deleting escapeing chars from <str>
-------------------------------------------------------------------------------]]
local fn = { v = "1" }
---------------- JSON Encode ---------------------------
local encode
local parse

local escape_char_map = {[ "\\" ] = "\\",[ "\"" ] = "\"", [ "\b" ] = "b", [ "\f" ] = "f", [ "\n" ] = "n", [ "\r" ] = "r", [ "\t" ] = "t",}
local escape_char_map_inv = { [ "/" ] = "/" }

for k, v in pairs(escape_char_map) do
  escape_char_map_inv[v] = k
end

local function escape_char(c)
  return "\\" .. (escape_char_map[c] or string.format("u%04x", c:byte()))
end

local function encode_nil(val) return "null" end

local function encode_table(val, stack)
  local res = {}
  stack = stack or {}
  -- Circular reference?
  if stack[val] then error("circular reference") end
  stack[val] = true
  if rawget(val, 1) ~= nil or next(val) == nil then
    -- Treat as array -- check keys are valid and it is not sparse
    local n = 0
    for k in pairs(val) do
      if type(k) ~= "number" then 
        print(k)
        error("invalid table: mixed or invalid key types (number)") 
      end
      n = n + 1
    end
    if n ~= #val then error("invalid table: sparse array") end
    -- Encode
    for i, v in ipairs(val) do
      table.insert(res, encode(v, stack))
    end
    stack[val] = nil
    return "[" .. table.concat(res, ",") .. "]"
  else
    -- Treat as an object
    for k, v in pairs(val) do
      if type(k) ~= "string" then
        print(k,v)
        error("invalid table: mixed or invalid key types (string)")
      end
      table.insert(res, encode(k, stack) .. ":" .. encode(v, stack))
    end
    stack[val] = nil
    return "{" .. table.concat(res, ",") .. "}"
  end
end

local function encode_string(val)
  return '"' .. val:gsub('[%z\1-\31\\"]', escape_char) .. '"'
end

local function encode_number(val)
-- Check for NaN, -inf and inf
  if val ~= val or val <= -math.huge or val >= math.huge then error("unexpected number value '" .. tostring(val) .. "'") end
  return string.format("%.14g", val)
end

local type_func_map = {[ "nil" ] = encode_nil, [ "table" ] = encode_table, [ "string" ] = encode_string, [ "number" ] = encode_number, [ "boolean" ] = tostring,}

encode = function(val, stack)
  local t = type(val)
  local f = type_func_map[t]
  if f then return f(val, stack) end
  error("unexpected type '" .. t .. "'")
end

function fn.json_encode(val, add_escape, round)
  if add_escape == true then
    return ( encode(val):gsub('"','\\"') )
  else
    return ( encode(val) )
  end
end
---------------- JSON Decode ---------------------------
local function create_set(...)
  local res = {}
  for i = 1, select("#", ...) do
    res[ select(i, ...) ] = true
  end
  return res
end

local space_chars = create_set(" ", "\t", "\r", "\n")
local delim_chars = create_set(" ", "\t", "\r", "\n", "]", "}", ",")
local escape_chars = create_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
local literals = create_set("true", "false", "null")

local literal_map = {[ "true" ] = true, [ "false" ] = false, [ "null" ] = nil,}

local function next_char(str, idx, set, negate)
  for i = idx, #str do
    if set[str:sub(i, i)] ~= negate then return i end
  end
  return #str + 1
end

local function decode_error(str, idx, msg)
  local line_count = 1
  local col_count = 1
  for i = 1, idx - 1 do
    col_count = col_count + 1
    if str:sub(i, i) == "\n" then
      line_count = line_count + 1
      col_count = 1
    end
  end
  error( string.format("%s at line %d col %d", msg, line_count, col_count) )
end

local function codepoint_to_utf8(n)
 -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
  local f = math.floor
  if n <= 0x7f then
    return string.char(n)
  elseif n <= 0x7ff then
    return string.char(f(n / 64) + 192, n % 64 + 128)
  elseif n <= 0xffff then
    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  elseif n <= 0x10ffff then
    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128, f(n % 4096 / 64) + 128, n % 64 + 128)
  end
  error( string.format("invalid unicode codepoint '%x'", n) )
end

local function parse_unicode_escape(s)
  local n1 = tonumber( s:sub(1, 4), 16 )
  local n2 = tonumber( s:sub(7, 10), 16 )
  -- Surrogate pair?
  if n2 then
    return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
  else
    return codepoint_to_utf8(n1)
  end
end

local function parse_string(str, i)
  local res = ""
  local j = i + 1
  local k = j
  while j <= #str do
    local x = str:byte(j)
    if x < 32 then
      decode_error(str, j, "control character in string")
    elseif x == 92 then -- `\`: Escape
      res = res .. str:sub(k, j - 1)
      j = j + 1
      local c = str:sub(j, j)
      if c == "u" then
        local hex = str:match("^[dD][89aAbB]%x%x\\u%x%x%x%x", j + 1) or str:match("^%x%x%x%x", j + 1) or decode_error(str, j - 1, "invalid unicode escape in string")
        res = res .. parse_unicode_escape(hex)
        j = j + #hex
      else
        if not escape_chars[c] then decode_error(str, j - 1, "invalid escape char '" .. c .. "' in string") end
        res = res .. escape_char_map_inv[c]
      end
      k = j + 1
    elseif x == 34 then -- `"`: End of string
      res = res .. str:sub(k, j - 1)
      return res, j + 1
    end
    j = j + 1
  end
  decode_error(str, i, "expected closing quote for string")
end

local function parse_number(str, i)
  local x = next_char(str, i, delim_chars)
  local s = str:sub(i, x - 1)
  local n = tonumber(s)
  if not n then decode_error(str, i, "invalid number '" .. s .. "'") end
  return n, x
end

local function parse_literal(str, i)
  local x = next_char(str, i, delim_chars)
  local word = str:sub(i, x - 1)
  if not literals[word] then decode_error(str, i, "invalid literal '" .. word .. "'") end
  return literal_map[word], x
end

local function parse_array(str, i)
  local res = {}
  local n = 1
  i = i + 1
  while 1 do
    local x
    i = next_char(str, i, space_chars, true)
    -- Empty / end of array?
    if str:sub(i, i) == "]" then
      i = i + 1
      break
    end
    -- Read token
    x, i = parse(str, i)
    res[n] = x
    n = n + 1
    -- Next token
    i = next_char(str, i, space_chars, true)
    local chr = str:sub(i, i)
    i = i + 1
    if chr == "]" then break end
    if chr ~= "," then decode_error(str, i, "expected ']' or ','") end
  end
  return res, i
end

local function parse_object(str, i)
  local res = {}
  i = i + 1
  while 1 do
    local key, val
    i = next_char(str, i, space_chars, true)
    -- Empty / end of object?
    if str:sub(i, i) == "}" then
      i = i + 1
      break
    end
    -- Read key
    if str:sub(i, i) ~= '"' then decode_error(str, i, "expected string for key") end
    key, i = parse(str, i)
    -- Read ':' delimiter
    i = next_char(str, i, space_chars, true)
    if str:sub(i, i) ~= ":" then decode_error(str, i, "expected ':' after key") end
    i = next_char(str, i + 1, space_chars, true)
    -- Read value
    val, i = parse(str, i)
    -- Set
    res[key] = val
    -- Next token
    i = next_char(str, i, space_chars, true)
    local chr = str:sub(i, i)
    i = i + 1
    if chr == "}" then break end
    if chr ~= "," then decode_error(str, i, "expected '}' or ','") end
  end
  return res, i
end

local char_func_map = {
  [ '"' ] = parse_string, [ "0" ] = parse_number, [ "1" ] = parse_number, [ "2" ] = parse_number, [ "3" ] = parse_number, [ "4" ] = parse_number,
  [ "5" ] = parse_number, [ "6" ] = parse_number, [ "7" ] = parse_number, [ "8" ] = parse_number, [ "9" ] = parse_number, [ "-" ] = parse_number, [ "t" ] = parse_literal,
  [ "f" ] = parse_literal, [ "n" ] = parse_literal, [ "[" ] = parse_array, [ "{" ] = parse_object,
  }

parse = function(str, idx)
  local chr = str:sub(idx, idx)
  local f = char_func_map[chr]
  if f then return f(str, idx) end
  decode_error(str, idx, "unexpected character '" .. chr .. "'")
end

function fn.json_decode(str, del_escape)
  if type(str) ~= "string" then error("expected argument of type string, got " .. type(str)) end
  if del_escape == true then str = str:gsub('\\','') end
  local res, idx = parse(str, next_char(str, 1, space_chars, true))
  idx = next_char(str, idx, space_chars, true)
  if idx <= #str then decode_error(str, idx, "trailing garbage") end
  return res
end
---------------- Convert CIE to RGB ---------------------------
function fn.cie_to_rgb(x, y)
	local z = 1.0 - x - y
	local X = (1 / y) * x
	local Z = (1 / y) * z
	--Convert to RGB using Wide RGB D65 conversion
	local red = X * 1.656492 - 0.354851 - Z * 0.255038
	local green	= -X * 0.707196 + 1.655397 + Z * 0.036152
	local blue = X * 0.051713 - 0.121364 + Z * 1.011530
	--If red, green or blue is larger than 1.0 set it back to the maximum of 1.0
	if (red > blue and red > green and red > 1.0) then
		green = green / red
		blue = blue / red
		red = 1.0
	elseif (green > blue and green > red and green > 1.0) then
		red = red / green
		blue = blue / green
		green = 1.0
	elseif (blue > red and blue > green and blue > 1.0) then
		red = red / blue
		green = green / blue
		blue = 1.0
  end
	--Reverse gamma correction
  if (red <= 0.0031308) then red = (12.92 * red) else red = ((1.0 + 0.055) * (red ^ (1.0 / 2.4)) - 0.055) end
	if (green <= 0.0031308) then green = (12.92 * green) else green = ((1.0 + 0.055) * (green ^ (1.0 / 2.4)) - 0.055) end
	if (blue <= 0.0031308) then blue = (12.92 * blue) else blue = ((1.0 + 0.055) * (blue ^ (1.0 / 2.4)) - 0.055) end
	--Convert normalized decimal to decimal
	red = math.abs(math.floor(red * 255 + 0.5))
	green = math.abs(math.floor(green * 255 + 0.5))
	blue = math.abs(math.floor(blue * 255 + 0.5))
	if not (red) then red = 0 end
	if not (green) then green = 0 end
	if not (blue) then blue = 0 end

	return red, green, blue
end
---------------- Convert RGB to CIE ---------------------------
function fn.rgb_to_cie(red, green, blue)
	--Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device
  if (red / 255 > 0.04045) then red = (((red / 255 + 0.055) / (1.0 + 0.055)) ^ 2.4) else red = (red / 255 / 12.92) end
	if (green / 255 > 0.04045) then green	= (((green / 255 + 0.055) / (1.0 + 0.055)) ^ 2.4) else green	= (green / 255 / 12.92) end
	if (blue / 255 > 0.04045) then blue = (((blue / 255 + 0.055) / (1.0 + 0.055)) ^ 2.4) else blue = (blue / 255 / 12.92) end
	--RGB values to XYZ using the Wide RGB D65 conversion formula
	local X = red * 0.664511 + green * 0.154324 + blue * 0.162028
	local Y = red * 0.283881 + green * 0.668433 + blue * 0.047685
	local Z = red * 0.000088 + green * 0.072310 + blue * 0.986039
	--Calculate the xy values from the XYZ values
  local x = string.format("%.6g", tostring(X / (X + Y + Z)))
  local y = string.format("%.6g", tostring(Y / (X + Y + Z)))
	if not (x) then x = 0 end
	if not (y) then	y = 0	end

	return x, y
end
---[[
---------------- Convert Integer to RGB ---------------------------
function fn.int_to_rgb(int) 
  local red = int >> 16
  local green = int - (red << 16) >> 8
  local blue = int - (red << 16) - (green << 8)

  return red, green, blue
end
---------------- Convert RGB to Integer ---------------------------
function fn.rgb_to_int(red, green, blue ) 
  return red << 16 | green << 8 | blue
end
--]]
--[[------------ Попадает ли число в диапазон ---------------------------
*	mode: num    - inRange('num', x, startRange, endRange)
*	mode: clock  - inRange('clock', nowHour, startHour, endHour[, xMin, startMin, endMin]) --]]
function fn.inRange(mode, x, startRange, endRange, nowMin, startMin, endMin)
  if (mode == 'clock') then
    if not xMin then xMin = 0 end
    if not startMin then startMin = 0 end
    if not endMin then endMin = 0 end
    x = x * 60 + xMin
    startRange = startRange * 60 + startMin
    endRange = endRange * 60 + endMin
    if startRange > endRange then
      if ((startRange <= x and x <= 24*60) or (0 <= x and x <= endRange)) then
        return true
      end
    else
      if (startRange <= x and x <= endRange) then
        return true
      end 
    end
  end
  if (mode == 'num') then
    if (startRange <= x and x <= endRange) then
      return true
    end
  end
  return false
end

return (fn)